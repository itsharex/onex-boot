package ${package}.modules.${moduleName}.controller;

import cn.hutool.core.lang.Dict;
import cn.hutool.core.util.StrUtil;
import cn.hutool.json.JSONObject;
import ${package}.${moduleName}..dto.${className}SaveOrUpdateReq;
import ${package}.${moduleName}..dto.${className}QueryReq;
import ${package}.${moduleName}.dto.${className}DTO;
import ${package}.${moduleName}.service.${className}Service;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.nb6868.onex.common.annotation.LogOperation;
import com.nb6868.onex.common.exception.ErrorCode;
import com.nb6868.onex.common.pojo.BaseReq;
import com.nb6868.onex.common.pojo.IdReq;
import com.nb6868.onex.common.pojo.PageData;
import com.nb6868.onex.common.pojo.Result;
import com.nb6868.onex.common.util.ExcelExportParams;
import com.nb6868.onex.common.util.ExcelExportUtils;
import com.nb6868.onex.common.validator.AssertUtils;
import com.nb6868.onex.common.validator.ValidatorUtils;
import com.nb6868.onex.common.validator.group.AddGroup;
import com.nb6868.onex.common.validator.group.DefaultGroup;
import com.nb6868.onex.common.validator.group.PageGroup;
import com.nb6868.onex.common.validator.group.UpdateGroup;
import com.nb6868.onex.uc.service.ParamsService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import java.util.List;

/**
 * ${comments}
 *
 * @author ${author} ${email}
 */
@RestController("${moduleName}${className}")
@RequestMapping("/${moduleName}/${pathName}/")
@Validated
@Tag(name = "${comments}")
public class ${className}Controller {
    @Autowired
    ${className}Service ${classname}Service;
    @Autowired
    ParamsService paramsService;

    @PostMapping({"querySchema", "formSchema"})
    @Operation(summary = "表单参数")
    public Result<?> formSchema(@Validated @RequestBody BaseReq req) {
        String code = "${moduleName}_${className}";
        JSONObject params = paramsService.getSystemContentObject(code, JSONObject.class, new JSONObject());
        // 添加自主定义
        return new Result<>().success(params);
    }

    @PostMapping("list")
    @Operation(summary = "列表")
    @RequiresPermissions("${moduleName}:${pathName}:query")
    public Result<?> list(@Validated({DefaultGroup.class}) @RequestBody ${className}QueryReq form) {
        // 拼接查询条件
        QueryWrapper<${className}Entity> queryWrapper = ${classname}Service.buildQueryWrapper(form, "list");
        List<<${className}DTO>> list = ${classname}Service.listDto(queryWrapper);
        return new Result<>().success(list);
    }

    @PostMapping("page")
    @Operation(summary = "分页")
    @RequiresPermissions("${moduleName}:${pathName}:query")
    public Result<?> page(@Validated({DefaultGroup.class, PageGroup.class}) @RequestBod ${className}QueryReq req) {
        // 拼接查询条件
        QueryWrapper${className}Entity> queryWrapper = ${classname}Service.buildQueryWrapper(req, "page");
        PageData<${className}DTO> page = ${classname}Service.pageDto(req, queryWrapper);
        return new Result<>().success(page);
    }

    @PostMapping("info")
    @Operation(summary = "信息")
    @RequiresPermissions("${moduleName}:${pathName}:query")
    public Result<?> info(@Validated @RequestBod IdReq req) {
        ${className}DTO data = ${classname}Service.getDtoById(req.getId());
        AssertUtils.isNull(data, ErrorCode.DB_RECORD_NOT_EXISTED);

        return new Result<>().success(data);
    }

    @PostMapping("saveOrUpdateValidate")
    @Operation(summary = "提交校验")
    public Result<?> saveOrUpdateValidate(@Validated(value = {DefaultGroup.class}) @RequestBody ${className}SaveOrUpdateReq req) {
        // 检查数据
        Dict result = Dict.create().set("alert", false);
        return new Result<>().success(result);
    }

    @PostMapping("saveOrUpdate")
    @Operation(summary = "新增或修改")
    @LogOperation("新增或修改")
    @RequiresPermissions("${moduleName}:${pathName}:edit")
    public Result<?> saveOrUpdate(@Validated(value = {DefaultGroup.class}) @RequestBody ${className}SaveOrUpdateReq form) {
        // 校验数据
        ValidatorUtils.validateEntity(!form.hasId(), form, AddGroup.class);
        ValidatorUtils.validateEntity(form.hasId(), form, UpdateGroup.class);
        // 处理数据
        ${className}Entity entity  = ${classname}Service.saveOrUpdateByReq(form);
        return new Result<>().success(entity);
    }

    @PostMapping("delete")
    @Operation(summary = "删除")
    @LogOperation("删除")
    @RequiresPermissions("${moduleName}:${pathName}:delete")
    public Result<?> delete(@Validated @RequestBody IdReq req) {
        // 删除数据
        boolean ret = ${classname}Service.removeById(req.getId());
        return new Result<>();
    }

    @PostMapping("exportExcel")
    @Operation(summary = "导出Excel")
    @LogOperation("导出Excel")
    public Result<?> exportExcel(@Validated({DefaultGroup.class}) @RequestBody ${className}QueryReq req) {
        // 获得excel导出配置
        ExcelExportParams excelExportParams = paramsService.getSystemContentObject("${modelName}N_${className}_EXPORT", ExcelExportParams.class, null);
        AssertUtils.isNull(excelExportParams, "缺少导出配置");
        // 开始处理导出
        if (excelExportParams.isAsync()) {
            return new Result<>().error("未实现异步导出");
        } else {
            // 拼接查询条件
            QueryWrapper<${className}Entity> queryWrapper = ${classname}Service.buildQueryWrapper(req, "list");
            List<${className}DTO> list = ${classname}Service.listDto(queryWrapper);
            String fileName = ExcelExportUtils.beanListExport(list, excelExportParams, null, null);
            // 文件上传到oss
            return new Result<>().success(Dict.create()
                    .set("async", excelExportParams.isAsync())
                    .set("url", ExcelExportUtils.getFileRequestPath(fileName)));
        }
    }

}
